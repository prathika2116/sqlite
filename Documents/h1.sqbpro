<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/prath/Downloads/Ex_Files_SQL_EssT/Ex_Files_SQL_EssT/Exercise Files/WSDA_Music.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="5253"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainArtist"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="280"/><column index="3" value="76"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="76"/><column index="2" value="187"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="93"/><column index="2" value="111"/><column index="3" value="162"/><column index="4" value="300"/><column index="5" value="167"/><column index="6" value="109"/><column index="7" value="132"/><column index="8" value="160"/><column index="9" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">SELECT
InvoiceDate,
BillingAddress,
BillingCity
from Invoice
WHERE
BillingCity like 'B%'
ORDER BY
InvoiceDate
--date
SELECT
InvoiceDate,
BillingAddress,
BillingCity
from Invoice
WHERE
InvoiceDate='2013-10-04 00:00:00'
ORDER BY
InvoiceDate
--date without time
SELECT
InvoiceDate,
BillingAddress,
BillingCity
from Invoice
WHERE
DATE(InvoiceDate)='2013-10-04'
ORDER BY
InvoiceDate
--AND OPERATER &amp; greater than operater
SELECT
InvoiceDate,
BillingAddress,
BillingCity
from Invoice
WHERE
DATE(InvoiceDate)='2013-10-04' AND total&gt;3
ORDER BY
InvoiceDate
--OR OPERATOR 
SELECT
InvoiceDate,
BillingAddress,
BillingCity
from Invoice
WHERE
BillingCity like 'B%' OR BillingCity like 'D%'
ORDER BY
InvoiceDate
--OR AND COMBINATION
SELECT
InvoiceDate,
BillingAddress,
BillingCity,total
from Invoice
WHERE
total&gt;1.98 and BillingCity
like 'B%' OR BillingCity like 'D%'
ORDER BY
InvoiceDate
--using bracketts
SELECT
InvoiceDate,
BillingAddress,
BillingCity,total
from Invoice
WHERE
total&gt;1.98 and
(BillingCity
like 'B%' OR BillingCity like 'D%')
ORDER BY
InvoiceDate
--using if then case statements
SELECT
InvoiceDate,
BillingCity,
BillingAddress,total,
CASE
when total&lt;2.00 then 'baseline purchase'
when total BETWEEN 2.00 AND 6.99 then 'low purchase'
when total BETWEEN 7.00 AND 15.00 then 'target purchase'
ELSE 'top performence'
END AS purchasetype
from Invoice
where purchasetype='top performence'
------------INNER JOIN--------------
SELECT* FROM 
Invoice
INNER JOIN
Customer
On
Invoice.CustomerId=Customer.CustomerId
------------simplifing inner joins------------
SELECT
i.total,
c.CustomerId
FROM
Invoice as i
INNER JOIN 
Customer as c
on
i.CustomerId=c.CustomerId
ORDER BY
c.CustomerId

------------Left outer joins------------
SELECT
i.total,
c.CustomerId
FROM
Invoice as i
LEFT OUTER JOIN 
Customer as c
on
i.CustomerId=c.CustomerId
ORDER BY
c.CustomerId
------------left outer joins------------
SELECT
i.total,
c.CustomerId
FROM
Invoice as i
LEFT OUTER JOIN 
Customer as c
on
i.CustomerId=c.CustomerId
ORDER BY
c.CustomerId
-----------JOIN ING IN MANY TABLES---------
SELECT
i.total,
c.CustomerId,
e.EmployeeId
FROM
Invoice as i
INNER JOIN
Customer as c
on
i.CustomerId=c.CustomerId
INNER JOIN
Employee as e
on
c.SupportRepId=e.EmployeeId
--------------creating new column by merging all other column--------------
SELECT
FirstName,
LastName,
Address,
City,
FirstName||' '||LastName as fullname
from
Customer
-----------length and substr function----
SELECT
PostalCode,
length(PostalCode),
substr(PostalCode,1,5)as shorten 
FROM
Customer
----------UPPER AND LOWER STRING FUNCTIONS--------
SELECT
FirstName,
upper(FirstName) as caps
FROM
Customer
-----------stftime and claculatng date-------------
SELECT 
FirstName,
LastName,
BirthDate,
strftime('%Y-%m-%d',BirthDate) as dwt
from Employee
--------calculating age----------------------
SELECT 
FirstName,
LastName,
strftime('%Y-%m-%d','now')-strftime('%Y-%m-%d',Birthdate) as age
 from Employee
 --------calculating max,min,avg,count aggrigate functions--------
 SELECT 
 MAX(total) AS MAXIMUMSALES,
 MIN(total) AS MINsales,
 AVG(total) AS Averagesales,
 COUNT(*) AS SALES
 FROM
 Invoice
 -------nesting function---------
 SELECT 
 round(AVG(TOTAL),2) AS ROUNDAVG
 FROM Invoice
 ---------filtering using group by condition---------
 SELECT 
 round(avg(total),2) as roundavf,
 BillingCity
 from Invoice
 group by
 BillingCity
 order by
 BillingCity
 ------------filtering using group by using where clause---------------
 SELECT 
 round(avg(total),2) as roundavf,
 BillingCity
 from Invoice
 where BillingCity like 'L%'
 group by
 BillingCity
 order by
 BillingCity
 ---------------filtering using group by with having clause-----------
  SELECT 
 round(avg(total),2) as roundavf,
 BillingCity
 from Invoice
 group by
 BillingCity
  having avg(total)&gt;5
 order by
 BillingCity
 ------------having and where in grouping---------
  SELECT 
 round(avg(total),2) as roundavf,
 BillingCity
 from Invoice
 where BillingCity like 'B%'
 group by
 BillingCity
 HAVING
 avg(total)&gt;6
 order by
 BillingCity
 ------------Nested queries------------------------
 SELECT
BillingCity,
total from 
Invoice where 
total&lt;(select avg(total) from  Invoice)
order by
total DESC
--------------AGGREGATING SUBQUERIES------------------
SELECT
BillingCity,
AVG(total),
(select avg(total) from Invoice)
from Invoice
------------in subquery-------------------------------
SELECT
 InvoiceDate,
 BillingCity,
 BillingAddress
 from 
 Invoice
 where InvoiceDate in
 (select invoicedate from invoice where InvoiceId in (251,252,254))
 ---------------NOTIN and DISTINCT--------------------
	 SELECT
	 TrackId
	 FROM Track
	 WHERE TrackId not in
	 (SELECT DISTINCT TrackId FROM Track)
---------------creating a VIEW------------------------
create VIEW V_avg as
SELECT ROUND(AVG(total)) as average from Invoice
---------------DML inserting--------------------------
insert into Artist(name)
values('prathika')
--------------DML update-----------------------------
update Artist SET name='prathika loganathan' where ArtistId=276
----------------dml delete---------------------------
delete from artist where ArtistId=276</sql><current_tab id="0"/></tab_sql></sqlb_project>
